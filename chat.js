// File: chat.js (·ªü th∆∞ m·ª•c G·ªêC) - Ho√†n ch·ªânh v·ªõi Voice Chat
document.addEventListener("DOMContentLoaded", () => {

    // === L·∫§Y C√ÅC PH·∫¶N T·ª¨ DOM ===
    // Chatbot
    const sendButton = document.getElementById("send-button");
    const userInput = document.getElementById("user-input");
    const chatWindow = document.getElementById("chat-window");
    const chatWidget = document.getElementById('ai-chat-widget');
    const chatBubble = document.getElementById('ai-chat-bubble');
    const chatBox = document.getElementById('ai-chat-box');
    const closeChatBtn = document.getElementById('ai-chat-close-btn');
    const micButton = document.getElementById("mic-button"); // N√∫t micro m·ªõi
    // Dropdown
    const dropdownBtns = document.querySelectorAll('.main-nav .dropbtn');
    const canvaIframe = document.querySelector('.canva-iframe-fix');
    const canvaBrandLink = document.querySelector('.canva-brand-link');
    // Modal
    const contactLink = document.getElementById('contact-link');
    const contactModal = document.getElementById('contact-modal');
    const closeModalBtn = document.getElementById('close-modal-btn');
    // Scroll Animation
    const modernEbookSection = document.getElementById('modern-ebook');

    // === KI·ªÇM TRA T√çNH NƒÇNG VOICE CHAT ===
    // 1. Ki·ªÉm tra Speech-to-Text (Nh·∫≠n d·∫°ng gi·ªçng n√≥i)
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    let recognition = null; // Kh·ªüi t·∫°o l√† null
    if (SpeechRecognition) {
        recognition = new SpeechRecognition();
        recognition.lang = 'vi-VN';
        recognition.interimResults = false;
    } else {
        console.warn("Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ SpeechRecognition (STT).");
        if(micButton) micButton.style.display = 'none'; // ·∫®n n√∫t micro n·∫øu kh√¥ng h·ªó tr·ª£
    }
    // 2. Ki·ªÉm tra Text-to-Speech (ƒê·ªçc vƒÉn b·∫£n)
    const synthesis = window.speechSynthesis;
    if (!synthesis) {
        console.warn("Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ SpeechSynthesis (TTS).");
    }
    // Bi·∫øn ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i ghi √¢m
    let isRecording = false;

    // === KI·ªÇM TRA C√ÅC PH·∫¶N T·ª¨ DOM KH√ÅC ===
    function checkElements(...elements) { return elements.every(el => el !== null); }
    const essentialChatElementsExist = checkElements(sendButton, userInput, chatWindow, chatWidget, chatBubble, chatBox, closeChatBtn, micButton); // Th√™m micButton
    const dropdownElementsExist = dropdownBtns.length > 0 && canvaIframe && canvaBrandLink;
    const modalElementsExist = checkElements(contactLink, contactModal, closeModalBtn);
    const scrollElementsExist = checkElements(modernEbookSection, chatWidget);

    // === G·∫ÆN S·ª∞ KI·ªÜN (EVENT LISTENERS) ===

    // 1. Chatbot Events
    if (essentialChatElementsExist) {
        sendButton.addEventListener("click", sendMessage);
        userInput.addEventListener("keypress", (event) => { if (event.key === "Enter") { event.preventDefault(); sendMessage(); } });
        chatBubble.addEventListener('click', toggleChatBox);
        closeChatBtn.addEventListener('click', toggleChatBox);

        // N·ªëi d√¢y ƒëi·ªán cho N√∫t Micro (ch·ªâ khi tr√¨nh duy·ªát h·ªó tr·ª£)
        if (micButton && recognition) {
            micButton.addEventListener("click", () => {
                if (isRecording) {
                    recognition.stop();
                } else {
                    try {
                        recognition.start();
                    } catch (error) {
                        // Th∆∞·ªùng l·ªói n·∫øu ƒëang c√≥ phi√™n ghi √¢m kh√°c ch·∫°y
                        console.error("L·ªói khi b·∫Øt ƒë·∫ßu ghi √¢m:", error);
                        addMessage("Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu ghi √¢m. Vui l√≤ng th·ª≠ l·∫°i.", "ai");
                        isRecording = false; // ƒê·∫∑t l·∫°i tr·∫°ng th√°i
                        micButton.classList.remove("is-recording");
                        micButton.textContent = 'üéôÔ∏è';
                    }
                }
            });

            // S·ª± ki·ªán khi b·∫Øt ƒë·∫ßu ghi √¢m
            recognition.onstart = () => {
                isRecording = true;
                micButton.classList.add("is-recording");
                micButton.textContent = '...'; // Bi·ªÉu th·ªã ƒëang nghe
            };

            // S·ª± ki·ªán khi c√≥ k·∫øt qu·∫£
            recognition.onresult = (event) => {
                const transcript = event.results[0][0].transcript;
                userInput.value = transcript;
                // T·ª± ƒë·ªông g·ª≠i tin nh·∫Øn sau khi nh·∫≠n d·∫°ng xong
                // D√πng setTimeout nh·ªè ƒë·ªÉ ƒë·∫£m b·∫£o √¥ input c·∫≠p nh·∫≠t tr∆∞·ªõc khi g·ª≠i
                setTimeout(sendMessage, 50);
            };

            // S·ª± ki·ªán khi k·∫øt th√∫c ghi √¢m (lu√¥n ch·∫°y, c·∫£ khi l·ªói ho·∫∑c d·ª´ng)
            recognition.onend = () => {
                isRecording = false;
                micButton.classList.remove("is-recording");
                micButton.textContent = 'üéôÔ∏è'; // Tr·∫£ l·∫°i icon micro
            };

            // S·ª± ki·ªán khi c√≥ l·ªói
            recognition.onerror = (event) => {
                console.error("L·ªói SpeechRecognition:", event.error);
                let errorMessage = event.error;
                if (event.error === 'not-allowed') {
                    errorMessage = "B·∫°n ch∆∞a c·∫•p quy·ªÅn s·ª≠ d·ª•ng micro.";
                } else if (event.error === 'no-speech') {
                    errorMessage = "Kh√¥ng nghe th·∫•y gi·ªçng n√≥i.";
                }
                addMessage(`L·ªói gi·ªçng n√≥i: ${errorMessage}`, "ai");
                isRecording = false; // ƒê·∫£m b·∫£o ƒë·∫∑t l·∫°i tr·∫°ng th√°i
            };
        }

    } else {
        console.error("L·ªñI Frontend: Thi·∫øu ph·∫ßn t·ª≠ chat quan tr·ªçng.");
    }

    // (Code g·∫Øn s·ª± ki·ªán cho Dropdown v√† Modal gi·ªØ nguy√™n nh∆∞ c≈©)
    // ...

    // === C√ÅC H√ÄM X·ª¨ L√ù (HELPER FUNCTIONS) ===

    // --- Chatbot Functions ---
    async function sendMessage() { /* ... Gi·ªØ nguy√™n code h√†m ... */ }
    // H√ÄM TH√äM TIN NH·∫ÆN (ƒê√É C√ì TTS)
    function addMessage(message, sender) {
        if (!chatWindow) return;
        const messageElement = document.createElement("p");
        messageElement.className = sender === "user" ? "user-message" : "ai-message";
        let textContentForTTS = message; // L∆∞u l·∫°i text g·ªëc ƒë·ªÉ ƒë·ªçc

        if (sender === 'user') {
            messageElement.textContent = message;
        } else {
            messageElement.innerHTML = message ? message.replace(/\n/g, '<br>') : '[AI kh√¥ng tr·∫£ l·ªùi]';
            // L·∫•y text content ƒë√£ x·ª≠ l√Ω <br> ƒë·ªÉ ƒë·ªçc cho ƒë√∫ng
            textContentForTTS = messageElement.textContent;
        }
        chatWindow.appendChild(messageElement);
        chatWindow.scrollTop = chatWindow.scrollHeight;

        // TH√äM M·ªöI: ƒê·ªåC TIN NH·∫ÆN C·ª¶A AI
        if (sender === 'ai' && synthesis && textContentForTTS) {
            try {
                // D·ª´ng gi·ªçng n√≥i c≈© (n·∫øu c√≥)
                if (synthesis.speaking) {
                    synthesis.cancel();
                }
                const utterance = new SpeechSynthesisUtterance(textContentForTTS);
                utterance.lang = 'vi-VN'; // Ng√¥n ng·ªØ ƒë·ªçc
                // utterance.rate = 1; // T·ªëc ƒë·ªô ƒë·ªçc (m·∫∑c ƒë·ªãnh 1)
                // utterance.pitch = 1; // Cao ƒë·ªô (m·∫∑c ƒë·ªãnh 1)

                // T√¨m gi·ªçng ƒë·ªçc ti·∫øng Vi·ªát (t√πy ch·ªçn, v√¨ kh√¥ng ph·∫£i tr√¨nh duy·ªát n√†o c≈©ng c√≥)
                const voices = synthesis.getVoices();
                const vietnameseVoice = voices.find(v => v.lang === 'vi-VN');
                if (vietnameseVoice) {
                    utterance.voice = vietnameseVoice;
                } else {
                    console.warn("Kh√¥ng t√¨m th·∫•y gi·ªçng ƒë·ªçc ti·∫øng Vi·ªát.");
                }

                synthesis.speak(utterance);
            } catch (ttsError) {
                console.error("L·ªói Text-to-Speech:", ttsError);
            }
        }
    }
    function showTypingIndicator() { /* ... Gi·ªØ nguy√™n code h√†m ... */ }
    function removeTypingIndicator() { /* ... Gi·ªØ nguy√™n code h√†m ... */ }
    function toggleChatBox() { /* ... Gi·ªØ nguy√™n code h√†m ... */ }

    // --- Dropdown Functions ---
    function closeAllDropdowns(exceptThisOne = null) { /* ... Gi·ªØ nguy√™n code h√†m ... */ }
    function loadCanvaContent(newUrl, newText) { /* ... Gi·ªØ nguy√™n code h√†m ... */ }

    // --- Modal Function (Kh√¥ng li√™n quan, gi·ªØ nguy√™n) ---

    // --- Scroll Animation Function (Kh√¥ng li√™n quan, gi·ªØ nguy√™n) ---

}); // K·∫øt th√∫c DOMContentLoaded
